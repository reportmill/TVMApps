
plugins {
    id 'java'
    id 'maven-publish'
    id 'idea'
    id 'application'
}

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.maven.apache.org/maven2'
    }
}

dependencies {

    // This artifact has TeaVM runtimes and tools
    compile group: 'org.teavm', name: 'teavm-cli', version: '0.6.1'

    compile project(':SnapKit')
    compile project(':SnapTea')
    compile project(':SnapDemos')
    compile project(':SnapBuilder')
    compile project(':RMDraw')
}

group = 'tvmapps'
version = '1.0-SNAPSHOT'

buildDir = 'build'

mainClassName = 'tvmapps.TVSnapBuilder'

ext.TV_OutDir = '/tmp/tvmout'

/**
 * Compile and generate resources and html.
 */
task tv_all {
    dependsOn 'tv_compile'
    dependsOn 'tv_copy_resources'
    dependsOn 'tv_gen_index_html'
}

/**
 * Run TeaVM compiler.
 */
task tv_compile (type: JavaExec){
    description = "Run TeaVM compiler"
    main = 'org.teavm.cli.TeaVMRunner'
    args = [ "-g", "-G", mainClassName, "-d", TV_OutDir ]
    classpath = sourceSets.main.runtimeClasspath
}

/**
 * Run TeaVM compiler.
 */
task tv_min (type: JavaExec){
    description = "Run TeaVM compiler"
    main = 'org.teavm.cli.TeaVMRunner'
    args = [ "-m", mainClassName, "-d", TV_OutDir ]
    classpath = sourceSets.main.runtimeClasspath
}

/**
 * Copies resource files from dependent projects to TeaVM output directory.
 */
task tv_copy_resources {

    doLast {

        // Get list of dependencies projects
        Set <ProjectDependency> projDeps = configurations.compile.allDependencies.findAll { it instanceof ProjectDependency }
        Set <Project> projs = projDeps.collect { it.dependencyProject }

        // Copy resources from dependencies projects to
        Set <File> rsrDirs = projs.collectMany { it.sourceSets.main.resources.srcDirs }
        rsrDirs.each { myFile ->
            println "copyRes " + myFile + ", " + myFile.getClass()
            copy {
                from myFile
                into TV_OutDir
                exclude '**/*.java'
                includeEmptyDirs false
            }
        }

        // Get all resource filenames, relative to TeaVM output directory
        List<String> txtFiles = rsrDirs.collectMany {
            String path = it.getAbsolutePath()
            List<String> paths = new FileNameFinder().getFileNames(path, "" /* includes */, '**/*.java' /* excludes */)
            paths.collect { it.substring(path.length()) }
        }

        // Write resource filenames to index.txt file in TeaVM output directory
        File file = file(TV_OutDir + "/index.txt")
        file.write("")
        txtFiles.each { file.append(it); file.append('\n') }
    }
}

/**
 * Generates the TeaVM index.html file in TeaVM output directory.
 */
task tv_gen_index_html {

    doLast {

        File file = file(TV_OutDir + "/index.html")
        file.write(TV_HTML_Text)
    }
}

ext.TV_HTML_Text = '''<!DOCTYPE html>
<html>
  <head>
    <title>Main page</title>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <script type="text/javascript" charset="utf-8" src="classes.js"></script>
  </head>
  <body onload="main()">
    <!-- TODO: add HTML content -->
  </body>
</html>
'''