
plugins {
    id 'application'
    id 'idea'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()

    // Maven package repository for latest TeaVM
    maven { url 'https://teavm.org/maven/repository' }
}

// TeaVM version
project.ext.teavmVersion = "0.7.0-dev-1209"  // "0.7.0-SNAPSHOT"
//project.ext.teavmVersion = "0.7.0-dev-1196"  // "0.7.0-SNAPSHOT"

dependencies {

    // Use teavm-cli jar from local Github build:
    //    cmd> git clone https://github.com/konsoletyper/teavm.git; cd teavm
    //    cmd> git checkout d710870c65fb3f8b0700b5d5fbf39292cc7e9a7f (3/31/21) (optional - get specific release)
    //    cmd> mvn clean install -DskipTests -Dteavm.build.all=false
    //    cmd> cd tools/cli; mvn clean install
    //compile files('/Users/jeff/Dev/teavm/teavm-cli-0.7.0-SNAPSHOT.jar')

    // TeaVM (might also want 'teavm-devserver', 'jso', 'jso-apis', 'classlib')
    implementation group: 'org.teavm', name: 'teavm-cli', version: "$teavmVersion"

    // Referenced projects
    implementation project(':SnapKit')
    implementation project(':SnapTea')
    implementation project(':SnapCharts')
    //implementation project(':SnapChartsPro')
    implementation project(':SnapDemos')
    implementation project(':SnapBuilder')
    implementation project(':SnapCode')
    implementation project(':RMDraw')
    implementation project(':RM16')
    //implementation project(':ComicScript')
    //implementation project(':Puppets')
    implementation project(':JavaKit')
}

group = 'tvmapps'
version = '1.0-SNAPSHOT'

buildDir = 'build'

// MainClassNames = tvmapps.TVSnapCharts, tvmapps.TVRMDraw, TVRM16, TVSnapBuilder, TVComicScript, TVPuppets
//mainClassName = 'tvmapps.TVPuppets'
mainClassName = 'tvmapps.TVSnapCode'

ext.TV_OutDir = '/tmp/tvmout'

/**
 * Compile and generate resources and html.
 */
task tv_all {
    dependsOn 'tv_compile'
    dependsOn 'tv_copy_resources'
    dependsOn 'tv_gen_index_html'
}

/**
 * Run TeaVM compiler.
 */
task tv_compile (type: JavaExec){
    description = "Run TeaVM compiler"
    jvmArgs = [ '-Xmx900m' ]
    main = 'org.teavm.cli.TeaVMRunner'
    args = [ "-g", "-G", mainClassName, "-d", TV_OutDir ]
    maxHeapSize = '800m'
    classpath = sourceSets.main.runtimeClasspath
}

/**
 * Run TeaVM compiler.
 */
task tv_min (type: JavaExec){
    description = "Run TeaVM compiler"
    jvmArgs = [ '-Xmx800m' ]
    main = 'org.teavm.cli.TeaVMRunner'
    args = [ "-m", mainClassName, "-d", TV_OutDir ]
    classpath = sourceSets.main.runtimeClasspath
}

/**
 * Copies resource files from dependent projects to TeaVM output directory.
 */
task tv_copy_resources {

    doLast {

        // Get list of dependencies projects
        Set <ProjectDependency> projDeps = configurations.implementation.allDependencies.findAll { it instanceof ProjectDependency }
        Set <Project> projs = projDeps.collect { it.dependencyProject }

        // Copy resources from dependencies projects to
        Set <File> rsrDirs = projs.collectMany { it.sourceSets.main.resources.srcDirs }
        rsrDirs.each { myFile ->
            println "copyRes " + myFile + ", " + myFile.getClass()
            copy {
                from myFile
                into TV_OutDir
                exclude '**/*.java'
                includeEmptyDirs false
            }
        }

        // Get all resource filenames, relative to TeaVM output directory
        List<String> txtFiles = rsrDirs.collectMany {
            String path = it.getAbsolutePath()
            List<String> paths = new FileNameFinder().getFileNames(path, "" /* includes */, '**/*.java' /* excludes */)
            paths.collect { it.substring(path.length()) }
        }

        // Write resource filenames to index.txt file in TeaVM output directory
        File file = file(TV_OutDir + "/index.txt")
        file.write("")
        txtFiles.each { file.append(it); file.append('\n') }
    }
}

/**
 * Generates the TeaVM index.html file in TeaVM output directory.
 */
task tv_gen_index_html {

    doLast {

        File file = file(TV_OutDir + "/index.html")
        file.write(TV_HTML_Text)
    }
}

ext.TV_HTML_Text = '''<!DOCTYPE html>
<html>
  <head>
    <title>Main page</title>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <script type="text/javascript" charset="utf-8" src="classes.js"></script>
  </head>
  <body onload="main()">
    <!-- TODO: add HTML content -->
  </body>
</html>
'''